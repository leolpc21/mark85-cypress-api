name: Pipeline Testes Automatizados API Cypress

# executa o workflow toda vez que for realizado um push ou pull-request no repositório
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # permite também executar esse workflow manualmente na aba "Actions" do GitHub
  workflow_dispatch:
    # entrada de dados
    inputs:
      spec:
        description: Executar testes em modo headless por spec (suíte de testes)
        # executar por padrão todas as suítes de testes presentes na pasta "e2e"
        default: cypress/e2e/*

jobs:
  # utilizado para garantir que os testes funcionais são executados com sucesso
  testes-automatizados-api-cypress-chrome:
    # agente de execução/runner do tipo máquina virtual bem enxuta, sem interface gráfica
    runs-on: ubuntu-latest

    # template cypress com todas as dependências necessárias para executar os testes
    container:
      image: cypress/browsers:node18.12.0-chrome103-ff107
      # usuário com perfil administrador
      options: --user 1001

    steps:
      - name: Passo 1 - Obter cópia do código-fonte do repositório
        uses: actions/checkout@v3.3.0

      - name: Create .env file
        run: |
          touch .env
          echo BASE_URL = ${{ secrets.CYPRESS_BASE_URL }} >> .env
          echo MONGO_URI = ${{ secrets.CYPRESS_MONGO_URI }} >> .env
          echo AMQP_HOST = ${{ secrets.CYPRESS_AMQP_HOST }} >> .env
          echo AMQP_QUEUE = ${{ secrets.CYPRESS_AMQP_QUEUE }} >> .env
          echo AMQP_TOKEN = ${{ secrets.CYPRESS_AMQP_TOKEN }} >> .env

      - name: Exibir conteúdo do .env
        run: cat .env

      - name: Passo 2 - Instalar dependências Mark 85 (apps > api)
        run: |
          yarn --cwd ./apps/api install

      - name: Passo 3 - Instalar dependências Mark 85 (apps > web)
        run: |
          yarn --cwd ./apps/web install

      - name: Passo 4 - verificar se as dependências Mark L (apps > api e apps > web) estão instaladas
        run: |
          yarn --cwd ./apps/api check &&
          yarn --cwd ./apps/web check

      - name: Passo 5 - executar Mark 85 (apps > api) em 2º plano em um ambiente de desenvolvimento local
        run: |
          yarn --cwd ./apps/mark85/api dev

      - name: Passo 6 - executar Mark 85 (apps > web) em 2º plano em um ambiente de desenvolvimento local
        run: |
          yarn --cwd ./apps/mark85/web dev

          # aguardar até que Mark 85 (apps > web) esteja pronto para acessar
          # while ! curl -sSf http://localhost:3000 > /dev/null; do sleep 1; done

      - name: Passo 7 - Executar testes em modo headless e Gerar os resultados dos testes
        run: |
          # instalar dependências cypress
          yarn --cwd ../.. install

          # executar os testes em modo headless e gerar os resultados dos testes
          yarn cypress run --browser chrome --headless

      - name: Passo 5 - Armazenar os resultados dos testes em vídeos
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: cypress-videos-chrome
          path: cypress/videos
          # armazena por 30 dias
          retention-days: 30

      - name: Passo 6 - Armazenar os resultados dos testes que falharam em screenshots
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: cypress-screenshots-chrome
          path: cypress/screenshots
          # armazena por 30 dias
          retention-days: 30
